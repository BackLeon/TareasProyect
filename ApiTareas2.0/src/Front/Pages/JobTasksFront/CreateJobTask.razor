@page "/Create-NewJobTask"
@inject NavigationManager NavigationManager
@inject HttpClient http
@using Newtonsoft.Json
@using System.Text
@using Newtonsoft.Json.Linq
@inject IToastService toastService


<EditForm Model="nuevaTarea" OnValidSubmit="ManejadorOnCrearPost" class="pt-4">
    <DataAnnotationsValidator />
    <div class="py-4">
        <div class=" row form-group ">
            <div class="col-6 offset-3 ">
                <div class="card border">
                    <div class="card-body px-lg-5 pt-4">
                        <h3 class="col-12 text-success text-center py-2">
                            <strong>Crear nueva tarea</strong>
                        </h3>
                        @{
                            if (MostrarErroresRegistro1)
                            {
                                toastService.ShowSuccess(Errores!);
                                toastService.ShowSuccess("Por favor espera, seras redireccionado hacia la tarea...");
                                MostrarErroresRegistro1 = false;
                                redirectToOtherPage = true;
                                Redireccionar();
                            }
                            else if(MostrarErroresRegistro2)
                            {
                                toastService.ShowError(Errores!);
                                MostrarErroresRegistro2 = false;
                            }

                        }

                        <hr style="background-color:aliceblue" />
                        <div class="py-2">
                            <label for="exampleFormControlInput1" class="form-label">Tarea</label>
                            <InputText @bind-Value="nuevaTarea.Radicado" class="form-control" placeholder="Numero de radicado" />
                            <ValidationMessage For="(()=>nuevaTarea.Radicado)" />

                        </div>
                        <div class="py-2">
                            <label for="exampleFormControlInput1" class="form-label">Tarea</label>
                            <InputText @bind-Value="nuevaTarea.Name" class="form-control" placeholder="Nombre de la tarea" />
                            <ValidationMessage For="(()=>nuevaTarea.Name)" />

                        </div>
                        <div class="py-2">
                            <label for="exampleFormControlInput1" class="form-label">Descripción</label>
                            <InputTextArea @bind-Value="nuevaTarea.Description" class="form-control" placeholder="Descripción de la tarea" />
                            <ValidationMessage For="(()=>nuevaTarea.Description)" />
                        </div>
                        <div class="py-2">
                            <label for="exampleFormControlInput1" class="form-label">Usuarios</label>
                            @* <InputSelect @bind-Value="nuevaTarea.AppUserId" class="form-control" placeholder="Descripción de la tarea" /> *@
                            <select @bind="nuevaTarea.AppUserId" class="form-control">
                                <option value="">Selecciona un usuario</option>
                                @foreach (var tarea in Tareas)
                                {
                                    <option value="@tarea.Id">@tarea.Email</option>
                                }
                            </select>
                            <ValidationMessage For="(()=>nuevaTarea.AppUserId)" />
                        </div>
                        <hr style="background-color:aliceblue" />
                        <div class="py-2">
                            <button type="submit" class="btn btn-success btn-block"><i class="fas fa-sign-in-alt"></i> Registrar</button>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>


</EditForm>



@code {

    [Inject]
    public NavigationManager? navigationManager { get; set; }
    private bool redirectToOtherPage = false;

    private bool MostrarErroresRegistro1 { get; set; } = false;
    private bool MostrarErroresRegistro2 { get; set; } = false;
    private int? IdTareaNueva { get; set; }

    private string? Errores { get; set; }

    public JobTaskToCreateDto nuevaTarea { get; set; } = new JobTaskToCreateDto();

    private async Task<RespuestCrearJobTask> CreateJobTas(JobTaskToCreateDto tareaNueva)
    {
        var content = JsonConvert.SerializeObject(tareaNueva);
        var bodyContent = new StringContent(content, Encoding.UTF8, "application/json");
        var response = await http.PostAsync($"{Inicializar.UrlBaseApi}api/JobTask/Create-new-JobTask", bodyContent);
        if(response.IsSuccessStatusCode)
        {
            var contentTemp = await response.Content.ReadAsStringAsync();
            var result = (JObject)JsonConvert.DeserializeObject(contentTemp)!;

            return new RespuestCrearJobTask { Correcto = true  , Id = ((int)result["result"]!["id"]!) , Mensaje = result["errorMessage"]!.ElementAt(0).ToString() };
        }
        else
        {
            return new RespuestCrearJobTask { Correcto = false ,Mensaje = "No se pudo crear la tarea" };
        }
    }

    private async Task ManejadorOnCrearPost()
    {
        var resultado = await CreateJobTas(nuevaTarea);
        if(resultado.Correcto)
        {
            IdTareaNueva = resultado.Id;
            MostrarErroresRegistro1 = true;
            Errores = resultado.Mensaje;
        }else
        {
            MostrarErroresRegistro2 = true;
            Errores = resultado.Mensaje;
        }

    }

    public IEnumerable<AppUserOnlyIdAndEmail> Tareas { get; set; } = new List<AppUserOnlyIdAndEmail>();


    private async Task<IEnumerable<AppUserOnlyIdAndEmail>> GetAllUserToShowAndSelect()
    {
        var contents = await http.GetAsync($"{Inicializar.UrlBaseApi}api/AppUser/GetAllUsers");
        var read = await contents.Content.ReadAsStringAsync();
        var resultado = JsonConvert.DeserializeObject<IEnumerable<AppUserOnlyIdAndEmail>>(read);

        return resultado!;
    }

    protected override async Task OnInitializedAsync()
    {
        Tareas = await GetAllUserToShowAndSelect();
    }

    private async Task Redireccionar()
    {
        if (redirectToOtherPage)
        {
            await Task.Delay(5000);

            navigationManager.NavigateTo($"/ver-post-19-99-for-1/{IdTareaNueva}");
        }
    }



}

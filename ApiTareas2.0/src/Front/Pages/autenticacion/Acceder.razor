@page "/acceder"
@inject IToastService toastService
@inject NavigationManager NavigationManager
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using Core.Dtos
@inject HttpClient http
@inject IJSRuntime JS

<div class="py-4">
    <div class=" row form-group ">
        <div class="col-6 offset-3 ">
            <div class="card border">
                <div class="card-body px-lg-5 pt-4">
                    <h3 class="col-12 text-success text-center py-2">
                        <strong>Acceder</strong>
                    </h3>
                    
                    <EditForm Model="usuarioAutenticacion" OnValidSubmit="AccesoUsuario">
                        <DataAnnotationsValidator />

                        @{
                            if (MostrarErroresAutenticacion)
                            {
                                toastService.ShowError(Errores!);
                                MostrarErroresAutenticacion = false;
                            }
                        }


                        <div class="form-row py-2">
                            <InputText @bind-Value="usuarioAutenticacion.Email" type="email" id="email" placeholder="Email..." class="form-control mb-2" />
                            <ValidationMessage For="(()=>usuarioAutenticacion.Email)"></ValidationMessage>
                        </div>

                        <div class="form-row py-2">
                            <InputText @bind-Value="usuarioAutenticacion.License" type="text" placeholder="Licencia..." id="License" class="form-control mb-2" />
                            <ValidationMessage For="(()=>usuarioAutenticacion.License)"></ValidationMessage>
                        </div>

                        <div class="form-row py-2">
                            <InputText @bind-Value="usuarioAutenticacion.Password" autocomplete="off" type="password" placeholder="Password..." id="password" class="form-control mb-2" />
                            <ValidationMessage For="(()=>usuarioAutenticacion.Password)"></ValidationMessage>
                        </div>

                        <div class="row">
                            <div class="col-6">
                                @if (false)
                                {
                                    <button type="submit" class="btn btn-success disabled" style="vertical-align:middle;line-height:30px;"><i class="fas fa-sign-in-alt"></i> Porfavor espera...</button>
                                }
                                else
                                {
                                    <button type="submit" class="btn btn-success" style="vertical-align:middle;line-height:30px;"><i class="fas fa-sign-in-alt"></i> Acceder</button>
                                }
                            </div>
                            <div class="col-6">
                                <a href="/registrarse"
                                   class="btn btn-primary text-white" style="vertical-align:middle;line-height:30px;"><i class="fas fa-user-plus"></i> Registrar nuevo usuario</a>
                            </div>
                        </div>
                    </EditForm>

                </div>
            </div>
        </div>
    </div>
</div>

@code
{

    // private async Task GuardarSesion()
    // {
    //     await JS.InvokeVoidAsync("localStorage.setItem", "Token", token);
    //     await ObtenerUsuario();
    // }

    // private async Task ObtenerUsuario()
    // {
    //     token = await JS.InvokeAsync<string>("localStorage.getItem", "Token");
    //     Console.WriteLine(token);
    // }

    private UsuarioAutenticacion usuarioAutenticacion = new UsuarioAutenticacion();
    public bool EstaProcesando { get; set; } = false;
    public bool MostrarErroresAutenticacion { get; set; } = false;

    public string? UrlRetorno { get; set; }

    public string? Errores { get; set; }

    [Inject]
    public IServicioAutenticacion? servicioAutenticacion { get; set; }

    [Inject]
    public NavigationManager? navigationManager { get; set; }

    private async Task AccesoUsuario()
    {
        MostrarErroresAutenticacion = false;
        EstaProcesando = true;
        var result = await servicioAutenticacion!.Acceder(usuarioAutenticacion);
        if (result.IsSuccess)
        {
            EstaProcesando = false;
            var urlAbsoluta = new Uri(navigationManager!.Uri);
            var parametrosQuery = HttpUtility.ParseQueryString(urlAbsoluta.Query);
            UrlRetorno = parametrosQuery["returnUrl"];
            if (string.IsNullOrEmpty(UrlRetorno))
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                navigationManager.NavigateTo("/" + UrlRetorno);
            }

        }
        else
        {
            EstaProcesando = false;
            MostrarErroresAutenticacion = true;
            Errores = "Email, licencia y/o contraseña son incorrectos";
            navigationManager!.NavigateTo("/acceder");
        }
    }

    [CascadingParameter]
    protected Task<AuthenticationState>? AuthState { get; set; }

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthState!).User;

        if (user!.Identity!.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/", true);
        }
    }

}